"use client"

import React, { useRef, useState } from 'react'
import { Button } from "@/components/ui/button"
import { FileDown } from "lucide-react"
import { Tooltip, TooltipContent, TooltipTrigger } from "@/components/ui/tooltip"
import { FileNode } from "@/lib/files/store"
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
  DialogFooter,
  DialogClose,
} from "@/components/ui/dialog"
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { useToast } from "@/components/ui/use-toast"
import { Checkbox } from "@/components/ui/checkbox"
import { exportMarkdownToPdf, exportAsText, exportMarkdownAsPlainText, ExportPdfOptions, convertMarkdownToHtml } from '@/lib/utils/markdown-export'

// Export format options
export type ExportFormat = 'pdf' | 'md' | 'txt' | 'html'

// PDF paper formats
const PDF_FORMATS = [
  { value: 'a4', label: 'A4 (210 × 297 mm)' },
  { value: 'letter', label: 'Letter (8.5 × 11 in)' },
  { value: 'legal', label: 'Legal (8.5 × 14 in)' }
] as const

interface FileExportProps {
  file: FileNode
  content: string
}

export function FileExport({ file, content }: FileExportProps) {
  const { toast } = useToast()
  const [open, setOpen] = useState(false)
  const [format, setFormat] = useState<ExportFormat>('pdf')
  const [filename, setFilename] = useState(() => {
    // Remove file extension if present
    return file.name.replace(/\.[^/.]+$/, '')
  })
  const [orientation, setOrientation] = useState<'portrait' | 'landscape'>('portrait')
  const [paperFormat, setPaperFormat] = useState<'a4' | 'letter' | 'legal'>('a4')
  const [includeHeader, setIncludeHeader] = useState(true)
  const [includeFooter, setIncludeFooter] = useState(true)
  const [headerText, setHeaderText] = useState(() => `${file.name}`)
  const [footerText, setFooterText] = useState('Generated by altIA Business Assistant')

  
  const markdownPreviewRef = useRef<HTMLDivElement>(null)
  const [exporting, setExporting] = useState(false)
  
  // Handle export
  const handleExport = async () => {
    try {
      setExporting(true)
      console.log('Exporting file in format:', format)
      
      if (format === 'pdf') {
        const options: ExportPdfOptions = {
          filename,
          orientation,
          format: paperFormat,
          headerText: includeHeader ? headerText : undefined,
          footerText: includeFooter ? footerText : undefined,
        }
        
        // Direct export to PDF
        await exportMarkdownToPdf(content, options)
      } else if (format === 'md') {
        // Export as markdown (raw)
        exportAsText(content, `${filename}.md`)
      } else if (format === 'txt') {
        // Export as plain text with markdown syntax removed
        exportMarkdownAsPlainText(content, `${filename}.txt`)
      } else if (format === 'html') {
        // Export as HTML with basic styling
        const htmlContent = convertMarkdownToHtml(content, file.name)
        exportAsText(htmlContent, `${filename}.html`)
      }
      
      toast({
        title: "File exported successfully",
        description: `Exported ${file.name} as ${format.toUpperCase()}`,
      })
      
      setOpen(false)
    } catch (error) {
      console.error("Export failed", error)
      toast({
        title: "Export failed",
        description: error instanceof Error ? error.message : "There was an error exporting your file. Please try again.",
        variant: "destructive",
      })
    } finally {
      setExporting(false)
    }
  }

  return (
    <>
      <Dialog open={open} onOpenChange={setOpen}>
        <DialogTrigger asChild>
          <Button
            variant="ghost"
            size="icon"
            className="h-8 w-8"
            title="Export"
          >
            <FileDown className="h-4 w-4" />
          </Button>
        </DialogTrigger>
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle>Export File</DialogTitle>
          </DialogHeader>
          
          <div className="grid gap-4 py-4">
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="filename" className="text-right">
                Filename
              </Label>
              <Input
                id="filename"
                value={filename}
                onChange={(e) => setFilename(e.target.value)}
                className="col-span-3"
              />
            </div>
            
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="format" className="text-right">
                Format
              </Label>
              <Select
                value={format}
                onValueChange={(value) => setFormat(value as ExportFormat)}
              >
                <SelectTrigger className="col-span-3">
                  <SelectValue placeholder="Select format" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="pdf">PDF Document (.pdf)</SelectItem>
                  <SelectItem value="md">Markdown (.md)</SelectItem>
                  <SelectItem value="txt">Plain Text (.txt)</SelectItem>
                </SelectContent>
              </Select>
            </div>
            
            {format === 'pdf' && (
              <>
                <div className="grid grid-cols-4 items-center gap-4">
                  <Label htmlFor="orientation" className="text-right">
                    Orientation
                  </Label>
                  <Select
                    value={orientation}
                    onValueChange={(value) => setOrientation(value as 'portrait' | 'landscape')}
                  >
                    <SelectTrigger className="col-span-3">
                      <SelectValue placeholder="Select orientation" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="portrait">Portrait</SelectItem>
                      <SelectItem value="landscape">Landscape</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                
              </>
            )}
          </div>
          
          <DialogFooter className="sm:justify-end">
            <DialogClose asChild>
              <Button type="button" variant="secondary">
                Cancel
              </Button>
            </DialogClose>
            <Button 
              onClick={handleExport} 
              disabled={exporting || !filename.trim()}
            >
              {exporting ? "Exporting..." : "Export"}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
      
      {/* Hidden div for PDF rendering */}
      <div 
        ref={markdownPreviewRef} 
        style={{ display: 'none' }}
        id="markdown-preview-container"
      />
    </>
  )
}
